{"version":3,"sources":["Header.js","Box.js","Content.js","App.js","serviceWorker.js","index.js"],"names":["Header","React","memo","handleFilter","useState","search","hdEnabled","oneWayEnabled","state","setState","handleChange","e","data","target","name","value","checked","className","type","placeholder","onChange","htmlFor","id","Box","src","icon","alt","Content","popular","map","city","key","others","App","cities","setCities","filter","setFilter","setData","useEffect","fetch","then","response","json","forEach","push","catch","err","hd_enabled","one_way_enabled","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.07891758.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = React.memo(({ handleFilter }) => {\r\n    const [state, setState] = React.useState({\r\n        search: '',\r\n        hdEnabled: false,\r\n        oneWayEnabled: false\r\n    })\r\n\r\n    const handleChange = (e) => {\r\n        let data = {}\r\n        if (e.target.name === \"search\") {\r\n            data = {\r\n                ...state,\r\n                [e.target.name]: e.target.value\r\n            }\r\n        } else {\r\n            data = {\r\n                ...state,\r\n                [e.target.name]: e.target.checked\r\n            }\r\n        }\r\n        setState(data)\r\n        handleFilter(data)\r\n    }\r\n\r\n    return (\r\n        <div className=\"header\">\r\n            <div className=\"textBox\">\r\n                <input className=\"input_text\" type=\"text\" placeholder=\"Search City\" name=\"search\" value={state.name} onChange={handleChange} />\r\n            </div>\r\n            <div className=\"checkBox\">\r\n                <label className=\"label\" htmlFor=\"hdEnabled\">HD ENABLED</label><br></br>\r\n                <input type=\"checkbox\" name=\"hdEnabled\" id=\"hdEnabled\" value={state.hdEnabled} onChange={handleChange} />\r\n            </div>\r\n            <div className=\"checkBox\">\r\n                <label className=\"label\" htmlFor=\"oneWayEnabled\">ONE WAY ENABLED</label><br></br>\r\n                <input type=\"checkbox\" name=\"oneWayEnabled\" id=\"oneWayEnabled\" value={state.oneWayEnabled} onChange={handleChange} />\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nconst Box = React.memo(({ data }) => {\r\n    return (\r\n        <div className=\"Box\">\r\n            <img className=\"cityImage\"  src={data.icon} alt={data.name}/>\r\n            <div className=\"cityName\">\r\n                {data.name}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default Box;","import React from 'react';\r\nimport Box from './Box';\r\n\r\nconst Content = ({ data, }) => {\r\n    return (\r\n        <div className=\"content\">\r\n\r\n            <h2 className=\"popular\">Popular</h2>\r\n            <div className=\"box-container\">\r\n                {\r\n                    data.popular.map(city =>\r\n                        <Box key={city.id} data={city} />)\r\n                }\r\n            </div>\r\n\r\n\r\n            <h2 className=\"others\">Others</h2>\r\n            <div className=\"box-container\">\r\n                {\r\n                    data.others.map(city =>\r\n                        <Box key={city.id} data={city} />)\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Content;","import React from 'react';\nimport './App.css';\nimport Header from './Header';\nimport Content from './Content';\n\nfunction App() {\n  const [cities, setCities] = React.useState([]);\n  const [filter, setFilter] = React.useState({});\n  const [data, setData] = React.useState({ popular: [], others: [] })\n\n  React.useEffect(() => {\n    fetch(\"https://api.zoomcar.com/v4/cities?platform=web\")\n      .then(response => response.json())\n      .then(response => {\n        const popular = [];\n        const others = [];\n        response.cities.forEach(city => {\n          (city.popular) ? popular.push(city) : others.push(city)\n        })\n        setData({ popular, others })\n        setCities(response.cities)\n      })\n      .catch(err => setCities([]))\n  }, [])\n\n  const handleFilter = (filter) => {\n    setFilter(filter)\n    const popular = [];\n    const others = [];\n    cities.forEach(city => {\n      if (filter.hdEnabled && filter.oneWayEnabled && filter.search) {\n        city = (city.hd_enabled === filter.hdEnabled && city.one_way_enabled === filter.oneWayEnabled && city.name.toLowerCase().includes(filter.search.toLowerCase())) ? city : null\n      } else if (filter.hdEnabled && filter.search) {\n        city = (city.hd_enabled === filter.hdEnabled && city.name.toLowerCase().includes(filter.search.toLowerCase())) ? city : null\n      } else if (filter.oneWayEnabled && filter.search) {\n        city = (city.one_way_enabled === filter.oneWayEnabled && city.name.toLowerCase().includes(filter.search.toLowerCase())) ? city : null\n      } else if (filter.hdEnabled && filter.oneWayEnabled) {\n        city = (city.hd_enabled === filter.hdEnabled && city.one_way_enabled === filter.oneWayEnabled) ? city : null\n      } else if (filter.hdEnabled) {\n        city = (city.hd_enabled === filter.hdEnabled) ? city : null\n      } else if (filter.oneWayEnabled) {\n        city = (city.one_way_enabled === filter.oneWayEnabled) ? city : null\n      } else if (filter.search) {\n        city = (city.name.toLowerCase().includes(filter.search.toLowerCase())) ? city : null\n      }\n      (city) && ((city.popular) ? popular.push(city) : others.push(city))\n    })\n    setData({ popular, others })\n  }\n\n  return (\n    <div className=\"App\">\n      <div>\n        <h1>CITIES</h1>\n        <Header handleFilter={handleFilter} />\n        <Content data={data} filter={filter} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}